{"pages":[{"title":"404","text":"","path":"404/index.html","date":"12-18","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"12-18","excerpt":""}],"posts":[{"title":"Git","text":"Git是什么？Git是目前世界上最先进的分布式版本控制系统（没有之一）。 Git的日常操作 克隆仓库：git clone git@github.com.git 拉取代码：git pull origin master 新建分支：git branch chenmanjie 删除分支：git branch -d chenmanjie 切换分支：git checkout chenmanjie 推送远程：git push origin master 查看提交记录：git log 回滚代码：git reset –hard [commit：6] 回滚文件：git checkout - filepath 回到最新代码：git reset HEAD git pull origin master 合并分支：git merge chenmanjie 会用PR给他人仓库贡献代码 linux日常操作 善用tab健，帮我们补全命令和路径 切换文件夹: cd 查看当前路径：pwd 查看当前文件夹下的文件： ls+ll 创建文件夹：mkdir 移动文件：mv 复制文件：cp 删除文件及文件夹：rm -rf(禁止使用) 编辑文件：vim 查看历史命令：history","path":"2018/12/21/Git/","date":"12-21","excerpt":"","preview":"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2659714922,1287356256&fm=26&gp=0.jpg"},{"title":"Promise","text":"Promise 是异步编程的一种解决方案: 从语法上讲，promise是一个对象，从它可以获取异步操作的消息。有三种状态:pending(等待态)，fulfiled(成功态)，rejected(失败态)；状态一旦改变，就不会再变。创造promise实例后，它会立即执行。promise是用来解决两个问题的: 回调地狱，代码难以维护， 常常第一个的函数的输出是第二个函数的输入这种现象 promise可以支持多个并发的请求，获取并发请求中的数据 这个promise可以解决异步的问题，本身不能说promise是异步的 Promise是一个构造函数，自己身上有all、reject、resolve这几个眼熟的方法，原型上有then、catch等同样很眼熟的方法。 Promise的构造函数接收一个参数:函数，并且这个函数需要传入两个参数: resolve :异步操作执行成功后的回调函数 reject:异步操作执行失败后的回调函数 reject的用法: 把Promise的状态置为rejected，这样我们在then中就能捕捉到，然后执行“失败”情况的回调。 all的用法: 谁跑的慢，以谁为准执行回调。all接收一个数组参数，里面的值最终都算返回Promise对象 then 链式操作的用法123456789promise.then((data) =&gt; &#123; console.log(data);&#125;).then((data) =&gt; &#123; console.log(data);&#125;).then((data) =&gt; &#123; console.log(data);&#125;); 方法总结: 捕获错误的方法 catch() 解析全部方法 all() 竞赛 race() 生成一个成功的promise resolve() 生成一个失败的promise reject()","path":"2018/12/20/Promise/","date":"12-20","excerpt":"","preview":"http://img0.imgtn.bdimg.com/it/u=381607956,4179025564&fm=26&gp=0.jpg"},{"title":"Vue.js快速入门","text":"Vue.js介绍Vue.js是当下很火的一个JavaScript MVVM库，它是以数据驱动和组件化的思想构建的。相比于Angular.js，Vue.js提供了更加简洁、更易于理解的API，使得我们能够快速地上手并使用Vue.js。 Vue.js的常用指令Vue.js的指令是以v-开头的，它们作用于HTML元素，指令提供了一些特殊的特性，将指令绑定在元素上时，指令会为绑定的目标元素添加一些特殊的行为，我们可以将指令看作特殊的HTML特性（attribute）。内置指令： v-if指令 v-show指令 v-else指令 v-for指令 v-bind指令 v-on指令Vue.js具有良好的扩展性，也可以开发一些自定义的指令 v-if是条件渲染指令，它根据表达式的真假来删除和插入元素，它的基本语法如下：v-if=&quot;expression&quot; expression是一个返回bool值的表达式，表达式可以是一个bool属性，也可以是一个返回bool的运算式。 注意：v-if指令是根据条件表达式的值来执行元素的插入或者删除行为。 v-else指令可以用v-else指令为v-if或v-show添加一个“else块”。v-else元素必须立即跟在v-if或v-show元素的后面——否则它不能被识别。v-show指令v-show也是条件渲染指令，和v-if指令不同的是，使用v-show指令的元素始终会被渲染到HTML，它只是简单地为元素设置CSS的style属性。v-for指令v-for指令基于一个数组渲染一个列表，它和JavaScript的遍历语法相似：v-for=&quot;item in items&quot; ####items是一个数组，item是当前被遍历的数组元素。 v-bind指令v-bind指令可以在其名称后面带一个参数，中间放一个冒号隔开，这个参数通常是HTML元素的特性。 vue+webpack安装,生成初始化vue项目安装vue-cli npm install -g vue-cli 全局安装vue-cli vue init webpack projectName 生成项目名为projectName的模板，这里的项目名projectName是项目名称 cd projectName 进入项目文件 npm install 初始化安装依赖 初始化依赖完成后，命令运行：npm run dev 上述完成后，我们就完成vue的项目就已经生产完成，当我们运行 localhost:8080 就能看见如下图的vue官方logo：","path":"2018/12/19/VueJs/","date":"12-19","excerpt":"","preview":"http://img.mp.itc.cn/upload/20161008/e8fadf087de643e8862d2836d0a65bba_th.png"},{"title":"Markdown语法格式","text":"标题 一级标题二级标题三级标题列表 列表1 列表2 列表1 列表2 列表1 列表2 列表1 列表2 引用区域 这里为引用区域部分 引用区域2 引用区域3 分割线 链接跳转百度跳转腾讯 图片 代码&lt;h4&gt;这里是代码&lt;/h4&gt;123&lt;h2&gt;我是代码段1&lt;/h2&gt;&lt;div&gt;我是代码段2&lt;/div&gt;&lt;span&gt;我是代码段3&lt;/span&gt; { 这里也是代码} 强调语句文字倾斜文字倾斜文字加粗文字加粗 删除已删除的文字 表格 name age sex jason 25 man rous 21 woman 这里是表头1 这里是表头2 这里是内容1 这里是内容2 学号 姓名 分数 01 小明 60 02 小红 70 03 小王 80","path":"2018/12/18/MarkDown/","date":"12-18","excerpt":"","preview":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1545231731249&di=13ef20b593507dfc5fa857ce56317d04&imgtype=0&src=http%3A%2F%2Fwww.cnplugins.com%2Fuploads%2Fcrximage%2F201801%2Fmarkdown%25E9%2598%2585%25E8%25AF%25BB%25E5%2599%25A8-logo-0.0.2.jpg"}]}